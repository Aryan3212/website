---
import { siteConfig } from '@/site-config'
import '../styles/global.css'
import { ViewTransitions } from 'astro:transitions'

export interface Props {
	title: string
	description?: string
	ogImage?: string | undefined
	articleDate?: string | undefined
}

const { title, description = siteConfig.description, ogImage, articleDate } = Astro.props
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const socialImageURL = new URL(ogImage ? ogImage : '/open-graph.png', Astro.url).href

const titleSeparator = 'â€¢'

const siteTitle = `${title} ${titleSeparator} ${siteConfig.title}`

import { join } from 'path'
import { AstroFont } from 'astro-font'
---

<!-- Global Metadata -->
<meta charset='utf-8' />
<meta name='viewport' content='width=device-width,initial-scale=1' />
<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
<meta name='generator' content={Astro.generator} />

<!-- Canonical URL -->
<link rel='canonical' href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{siteTitle}</title>

<!-- ViewTransitions  -->
<ViewTransitions />

<!-- SEO -->
<meta name='title' content={siteTitle} />
<meta name='description' content={description} />
<meta name='author' content={siteConfig.author} />

<!-- Open Graph / Facebook -->
<meta property='og:type' content={articleDate ? 'article' : 'website'} />
<meta property='og:url' content={Astro.url} />
<meta property='og:title' content={title} />
<meta property='og:description' content={description} />
<meta property='og:image' content={socialImageURL} />
{
	articleDate && (
		<>
			<meta property='article:author' content={siteConfig.author} />
			<meta property='article:published_time' content={articleDate} />
		</>
	)
}

<!-- Twitter -->
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={Astro.url} />
<meta property='twitter:title' content={title} />
<meta property='twitter:description' content={description} />
<meta property='twitter:image' content={socialImageURL} />

<!-- RSS auto-discovery -->
<link rel='alternate' type='application/rss+xml' title={siteConfig.title} href='/rss.xml' />

<script is:inline>
	!(function (t, e) {
		var o, n, p, r
		e.__SV ||
			((window.posthog = e),
			(e._i = []),
			(e.init = function (i, s, a) {
				function g(t, e) {
					var o = e.split('.')
					2 == o.length && ((t = t[o[0]]), (e = o[1])),
						(t[e] = function () {
							t.push([e].concat(Array.prototype.slice.call(arguments, 0)))
						})
				}
				;((p = t.createElement('script')).type = 'text/javascript'),
					(p.crossOrigin = 'anonymous'),
					(p.async = !0),
					(p.src =
						s.api_host.replace('.i.posthog.com', '-assets.i.posthog.com') + '/static/array.js'),
					(r = t.getElementsByTagName('script')[0]).parentNode.insertBefore(p, r)
				var u = e
				for (
					void 0 !== a ? (u = e[a] = []) : (a = 'posthog'),
						u.people = u.people || [],
						u.toString = function (t) {
							var e = 'posthog'
							return 'posthog' !== a && (e += '.' + a), t || (e += ' (stub)'), e
						},
						u.people.toString = function () {
							return u.toString(1) + '.people (stub)'
						},
						o =
							'init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug getPageViewId'.split(
								' '
							),
						n = 0;
					n < o.length;
					n++
				)
					g(u, o[n])
				e._i.push([i, s, a])
			}),
			(e.__SV = 1))
	})(document, window.posthog || [])
	posthog.init('phc_fv22mw84lEexQPf50Ae8NyHEsaqSa8xYBruNyTlij31', {
		api_host: 'https://us.i.posthog.com',
		person_profiles: 'identified_only' // or 'always' to create profiles for anonymous users as well
	})
</script>
<AstroFont
	config={[
		{
			preload: false,
			display: 'swap',
			name: 'Manrope',
			fallback: 'sans-serif',
			src: [
				{
					weight: '200',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-ExtraLight.woff2')
				},
				{
					weight: '300',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-Light.woff2')
				},
				{
					weight: '400',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-Regular.woff2')
				},
				{
					weight: '500',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-Medium.woff2')
				},
				{
					weight: '600',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-SemiBold.woff2')
				},
				{
					weight: '700',
					preload: true,
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-Bold.woff2')
				},
				{
					weight: '800',
					style: 'normal',
					path: join(process.cwd(), 'public', 'fonts', 'Manrope-ExtraBold.woff2')
				}
			]
		}
	]}
/>
